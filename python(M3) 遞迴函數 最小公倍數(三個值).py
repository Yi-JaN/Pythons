#遞迴函數:最小公倍數(三個值)
def gcd(a,b) :
    summ=(a*b) #先相乘兩個丟進來的值
    while b>=1 : #然後兩個值先相乘完之後就做輾轉相除法,先找出兩值之間的最大公因數
        xx=a%b
        a=b
        b=xx
    alls=(summ//a) #alls是算目前這兩值的最小公倍數,a(最大公倍數)丟進來//取商
    a=alls  #然後alls(最小公倍數)給a生成值,所以我的a來這邊就變成最小公倍數
    return a    #之後回傳a,看當初丟的時候誰是代表a值進去,是誰就丟回去給他,這邊不下函數名稱

x=int(input()) #輸入三個值
y=int(input())
z=int(input())
print(gcd(gcd(x,y),z)) #把他們三個丟進gcd一開始先分兩個為一括號,待會要用輾轉相除法

#步驟如下
#假設 x=12 y=8 z=16
#第1步:那第1次算回傳值依照下面的print(gcd(gcd(x,y),z)); 先取內括號的值來算,也就是x=12跟y=8來算
#第2步:之後12跟8由下至上來到def函數做遞迴函數,裡面用輾轉相除法算出兩數之間的最大公因數,之後依照
#      "遞迴函數裡面"的循環,最終a return回去,原本以為return回去沒下函數名稱這個a(x)就可以不用在
#      丟上去了,沒想到還有gcd(gcd(x,y),z);也就是外括號的gcd裡的z
#第3步:之後就把原本內括號裡的回傳值(x)跟外括號的z在由下至上做def遞迴函數,而回傳值x在def函數括號裡是a,
#      而z這邊是def函數括號裡的b,然後就可以開始算之後在裡面用輾轉相除法算出兩數之間的最大公因數,
#      依照"遞迴函數裡面"的循環,最終a return回去,而最終a(x)就是真正的最小公倍數,然後這次return沒下
#      函數名稱,就可以真的不用在由下至上丟入def遞迴函數裡了,之後再print括號裡列印最後回傳的x值(已經是真正最小公倍數)

# 第一次 x=12  y=8                第二次   x=回傳值  z=16
#        |     |                            |        |
#  def-> a     b                  def->     a        b        
# 回傳值是a,所以丟回x身上           第2次回傳值是a,所以丟回x身上 ->之後沒gcd外括號可以直接列印總回傳值答案了

#輸入->12 8 16    300  250  200
#輸出->48         3000